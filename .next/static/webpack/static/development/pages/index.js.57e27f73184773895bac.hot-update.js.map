{"version":3,"file":"static/webpack/static/development/pages/index.js.57e27f73184773895bac.hot-update.js","sources":["webpack:///./static/auth.js"],"sourcesContent":["import Cookie from 'js-cookie';\nimport jwt from 'jsonwebtoken';\nimport fetch from 'isomorphic-unfetch';\nimport * as settings from '../settings';\n\n//responsbile for handling the token verification and cookie operations\n\n\nasync function getJWK() {\n\tconst res = await fetch(`https://${settings.domain}/.well-known/jwks.json`);\n\tconst jwk = await res.json();\n\treturn jwk;\n}\n\nfunction saveToken(jwtToken, accessToken) {\n\tCookie.set('user', jwt.decode(jwtToken));\n\tCookie.set('jwtToken', jwtToken);\n}\n\n//when we delete token, we also remove the users cookie and remove the jwt token\nfunction deleteToken() {\n\tCookie.remove('user');\n\tCookie.remove('jwtToken');\n}\n\n// verifying the token\n// setting values: decoded token should be the decodeds jwt token with a status of true for the complete property\n// jwk value awaits the getJWK() which gets a JWK token\n// the cert is assigned a value according to the jwk.keys value and a combination of some other info\n// then checks if the cert created matches another cert?\n//\nasync function verifyToken(token) {\n\tif (token) {\n\t\tconst decodedToken = jwt.decode(token, { complete: true });\n\t\tconst jwk = await getJWK();\n\t\tlet cert = jwk.keys[0].x5c[0];\n\t\tconsole.log('cert', cert);\n\t\tcert = cert.match(/.{1,64}/g).join('\\n');\n\t\tcert = `-----BEGIN CERTIFICATE-----\\n${cert}\\n-----END CERTIFICATE-----\\n`;\n\t\tif (jwk.keys[0].kid === decodedToken.header.kid) {\n\t\t\ttry {\n\t\t\t\tjwt.verify(token, cert);\n\t\t\t\treturn true;\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n}\n\nasync function getTokenForBrowser() {\n\tconst token = Cookie.getJSON('jwtToken');\n\tconst validToken = await verifyToken(token);\n\tif (validToken) {\n\t\treturn Cookie.getJSON('user');\n\t}\n}\n\nasync function getTokenForServer(req) {\n\tif (req.headers.cookie) {\n\t\tconst jwtFromCookie = req.headers.cookie\n\t\t\t.split(';')\n\t\t\t.find(c => c.trim().startsWith('jwtToken='));\n\t\tif (!jwtFromCookie) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst token = jwtFromCookie.split('=')[1];\n\t\tconst validToken = await verifyToken(token);\n\t\tif (validToken) {\n\t\t\treturn jwt.decode(token);\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n\nexport {\n\tsaveToken,\n\tdeleteToken,\n\tgetTokenForBrowser,\n\tgetTokenForServer,\n\tverifyToken\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAIA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAEA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AACA;AADA;AAUA;AAVA;AACA;AADA;AAAA;AAAA;AAaA;AAbA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAoBA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAQA;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAQA;AARA;AAAA;AACA;AADA;AASA;AACA;AAVA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;A","sourceRoot":""}